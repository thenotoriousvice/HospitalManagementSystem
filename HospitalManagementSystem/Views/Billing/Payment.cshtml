@model HospitalManagementSystem.Repository.Models.Bill

@{
    ViewData["Title"] = "Process Payment";
}

<div class="container mt-4 mb-4">
    <div class="card shadow-md border-0 rounded-3">
        <div class="card-header bg-gradient-primary text-white py-3 rounded-top">
            <h2 class="card-title m-0 fw-bold"><i class="bi bi-wallet-fill me-2"></i> Process Payment</h2>
        </div>
        <div class="card-body p-4">
            <h4 class="mb-3">Bill Details</h4>
            <dl class="row">
                <dt class="col-sm-4 text-secondary">Bill ID:</dt>
                <dd class="col-sm-8 fw-bold">@Model.BillId</dd>

                <dt class="col-sm-4 text-secondary">Patient ID:</dt>
                <dd class="col-sm-8 fw-bold">@Model.PatientId</dd>

                <dt class="col-sm-4 text-secondary">Total Amount:</dt>
                <dd class="col-sm-8 fw-bold">₹ @Model.TotalAmount.ToString("N2")</dd>

                <dt class="col-sm-4 text-secondary">Bill Date:</dt>
                <dd class="col-sm-8 fw-bold">@Model.BillDate.ToString("dd-MMM-yyyy hh:mm tt")</dd>

                <dt class="col-sm-4 text-secondary">Current Status:</dt>
                <dd class="col-sm-8 fw-bold" id="billStatusText">@Model.Status.ToString()</dd>

                @if (!string.IsNullOrEmpty(Model.UploadedFilePath))
                {
                    <dt class="col-sm-4 text-secondary">Uploaded Document:</dt>
                    <dd class="col-sm-8 fw-bold"><a href="@Model.UploadedFilePath" target="_blank" class="btn btn-sm btn-outline-info"><i class="bi bi-file-earmark-arrow-down me-1"></i> View Document</a></dd>
                }
            </dl>

            <hr />

            <div id="paymentSection" class="text-center">
                @if (Model.Status == HospitalManagementSystem.Repository.Models.BillStatus.PENDING_PAYMENT)
                {
                    <button type="button" class="btn btn-success btn-lg rounded-pill shadow" data-bs-toggle="modal" data-bs-target="#paymentOptionsModal">
                        <i class="bi bi-credit-card-fill me-2"></i> Pay Now
                    </button>
                }
                else
                {
                    <div class="alert alert-success mt-3" role="alert">
                        <i class="bi bi-check-circle-fill me-2"></i> Payment Successful!
                    </div>
                    <button type="button" class="btn btn-info btn-lg rounded-pill shadow" data-bs-toggle="modal" data-bs-target="#billDetailsModal" onclick="loadBillDetails(@Model.BillId)">
                        <i class="bi bi-file-earmark-text-fill me-2"></i> View Bill
                    </button>
                }
            </div>

            <div class="d-flex justify-content-end mt-3">
                <a asp-action="Show" class="btn btn-outline-secondary rounded-pill ms-3"><i class="bi bi-arrow-left-circle-fill me-2 align-middle"></i> Back to Bills List</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="paymentOptionsModal" tabindex="-1" aria-labelledby="paymentOptionsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="paymentOptionsModalLabel"><i class="bi bi-cash-coin me-2"></i> Select Payment Method</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <button type="button" class="btn btn-outline-success btn-lg w-75 mb-3" onclick="processPayment('@Model.BillId', 'Cash')">
                    <i class="bi bi-cash me-2"></i> Cash Payment
                </button>
                <button type="button" class="btn btn-outline-primary btn-lg w-75 mb-3" onclick="processPayment('@Model.BillId', 'Online')">
                    <i class="bi bi-laptop me-2"></i> Online Payment
                </button>
                <button type="button" class="btn btn-outline-info btn-lg w-75" onclick="processPayment('@Model.BillId', 'Insurance')">
                    <i class="bi bi-shield-check me-2"></i> Insurance Claim
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="billDetailsModal" tabindex="-1" aria-labelledby="billDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="billDetailsModalLabel"><i class="bi bi-receipt me-2"></i> Bill Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="billDetailsContent">
                    Loading bill details...
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="printBillDetails()">Print Bill</button>
            </div>
        </div>
    </div>
</div>


@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.min.css">
    <style>
        body {
            background-color: #E0F2F7; /* Lightest blue from palette for the overall background */
        }

        .card {
            background-color: #FFFFFF; /* Keep card background white or a very light shade from the palette */
            border-color: #B3E0EB !important; /* Lighter blue for card borders */
        }

        .card-header.bg-gradient-primary {
            background: linear-gradient( #7A9FE6) !important; /* Darkest to Darker blue gradient */
            color: #FFFFFF !important;
        }

        /* Specific button colors as requested */
        .btn-success { /* Paid - Green */
            background-color: #28a745 !important;
            border-color: #28a745 !important;
        }

            .btn-success:hover {
                background-color: #218838 !important;
                border-color: #1e7e34 !important;
            }

        .btn-danger { /* Warning - Red (if used elsewhere) */
            background-color: #dc3545 !important;
            border-color: #dc3545 !important;
        }

            .btn-danger:hover {
                background-color: #c82333 !important;
                border-color: #bd2130 !important;
            }

        .btn-warning { /* Pending - Yellow (if used elsewhere) */
            background-color: #ffc107 !important;
            border-color: #ffc107 !important;
        }

            .btn-warning:hover {
                background-color: #e0a800 !important;
                border-color: #d39e00 !important;
            }

        .btn-info { /* Insurance - Blue */
            background-color: #17a2b8 !important; /* A distinct blue, different from the palette's blues, as requested for "insurance - blue" */
            border-color: #17a2b8 !important;
        }

            .btn-info:hover {
                background-color: #138496 !important;
                border-color: #117a8b !important;
            }

        /* General primary buttons matching the palette */
        .btn-primary {
            background-color: #0066FF,#66A3FF, #7A9FE6; /* Darkest blue from palette */
            border-color: #007BFF;
            color: #FFFFFF;
        }

            .btn-primary:hover {
                background-color: #0056b3; /* Slightly darker on hover */
                border-color: #0056b3;
            }

        .btn-outline-secondary {
            color: #5CB8CD; /* Darker blue for outline buttons */
            border-color: #5CB8CD;
        }

            .btn-outline-secondary:hover {
                background-color: #5CB8CD;
                color: #FFFFFF;
            }

        /* Modal specific colors */
        .modal-header.bg-primary {
            background-color: #007BFF !important; /* Darkest blue from palette */
        }

        .modal-header.bg-info {
            background-color: #17a2b8 !important; /* Insurance blue for the "View Bill" modal header */
        }


        .text-secondary {
            color: #34495E !important; /* Darker text for labels */
        }

        .fw-bold {
            color: #1F3044; /* Even darker for important text */
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border-color: #c3e6cb;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border-color: #f5c6cb;
        }

        .alert-info {
            background-color: #d1ecf1;
            color: #0c5460;
            border-color: #bee5eb;
        }

        .spinner-border {
            color: #007BFF !important; /* Match spinner to primary blue */
        }

        .btn-close-white {
            filter: invert(1) grayscale(100%) brightness(200%);
        }

        /* Custom styles for the bill details print */
        @@media print {
            body * {
                visibility: hidden;
            }

            #billDetailsModal, #billDetailsModal * {
                visibility: visible;
            }

            #billDetailsModal {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
                overflow: hidden; /* Prevent scrollbars */
            }

            .modal-footer {
                display: none; /* Hide footer buttons when printing */
            }

            .modal-header .btn-close {
                display: none; /* Hide close button when printing */
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Helper function to get anti-forgery token for AJAX POSTs
        function getAntiForgeryToken() {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenElement ? tokenElement.value : null;
        }

        // Function to process payment
        async function processPayment(billId, paymentMethod) {
            var paymentOptionsModalElement = document.getElementById('paymentOptionsModal');
            var paymentOptionsModal = bootstrap.Modal.getInstance(paymentOptionsModalElement);
            var paymentSection = document.getElementById('paymentSection'); // Get the payment section container

            // 1. Immediately hide the Bootstrap modal (this initiates the fade-out of the modal content and backdrop)
            if (paymentOptionsModal) {
                paymentOptionsModal.hide();
            }

            // 2. Display a loading spinner and message in the main payment section
            // This replaces the previous content like the 'Pay Now' button
            paymentSection.innerHTML = `
                <div class="d-flex flex-column justify-content-center align-items-center mt-3 p-4 border rounded shadow-sm bg-light">
                    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3 fs-5 fw-bold text-dark">Processing Payment (${paymentMethod})...</p>
                    <small class="text-muted">Please do not close this window.</small>
                </div>
            `;

            // 3. Listen for the 'hidden.bs.modal' event. This ensures our next steps run AFTER Bootstrap
            // has ideally finished its hiding animation and removed the backdrop.
            paymentOptionsModalElement.addEventListener('hidden.bs.modal', async function handler() {
                // Remove the event listener to prevent it from firing multiple times if the modal is reused
                paymentOptionsModalElement.removeEventListener('hidden.bs.modal', handler);

                // --- CRITICAL WORKAROUND: Forcefully remove the modal-backdrop if it still exists ---
                // This is a direct DOM manipulation to address the persistent grey screen.
                // It should only be necessary if Bootstrap's hide() is not fully cleaning up.
                var existingBackdrop = document.querySelector('.modal-backdrop');
                if (existingBackdrop) {
                    existingBackdrop.parentNode.removeChild(existingBackdrop);
                    // Also ensure the body classes are reset for scrolling
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = ''; // Restore scrollbar
                }
                // --- END WORKAROUND ---

                // Simulate a delay for payment processing (optional, adjust or remove as needed for realism)
                await new Promise(resolve => setTimeout(resolve, 1500)); // 1.5 second delay

                try {
                    const response = await fetch(`/Billing/ProcessPayment?billId=${billId}&paymentMethod=${paymentMethod}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.success) {
                            // Payment successful, update the section with success message
                            paymentSection.innerHTML = `
                                <div class="alert alert-success mt-3" role="alert">
                                    <i class="bi bi-check-circle-fill me-2"></i> Payment Successful! (${paymentMethod} payment)
                                </div>
                                <button type="button" class="btn btn-info btn-lg rounded-pill shadow mt-3" data-bs-toggle="modal" data-bs-target="#billDetailsModal" onclick="loadBillDetails(${billId})">
                                    <i class="bi bi-file-earmark-text-fill me-2"></i> View Bill
                                </button>
                            `;
                            document.getElementById('billStatusText').innerText = data.billStatus;
                        } else {
                            // Payment failed, display error message and a retry button
                            paymentSection.innerHTML = `
                                <div class="alert alert-danger mt-3" role="alert">
                                    <i class="bi bi-x-circle-fill me-2"></i> Payment failed: ${data.message || 'Unknown error.'}
                                </div>
                                <button type="button" class="btn btn-primary btn-lg rounded-pill shadow mt-3" data-bs-toggle="modal" data-bs-target="#paymentOptionsModal">
                                    <i class="bi bi-cash-coin me-2"></i> Try Payment Again
                                </button>
                            `;
                        }
                    } else {
                        // HTTP error (e.g., 404, 500 from server)
                        paymentSection.innerHTML = `
                            <div class="alert alert-danger mt-3" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i> Error processing payment. HTTP Status: ${response.status}. Please try again.
                            </div>
                            <button type="button" class="btn btn-primary btn-lg rounded-pill shadow mt-3" data-bs-toggle="modal" data-bs-target="#paymentOptionsModal">
                                <i class="bi bi-cash-coin me-2"></i> Try Payment Again
                            </button>
                        `;
                    }
                } catch (error) {
                    console.error('An unhandled error occurred during payment processing:', error);
                    paymentSection.innerHTML = `
                        <div class="alert alert-danger mt-3" role="alert">
                            <i class="bi bi-exclamation-octagon-fill me-2"></i> An unexpected error occurred. Please check your internet connection or try again.
                        </div>
                        <button type="button" class="btn btn-primary btn-lg rounded-pill shadow mt-3" data-bs-toggle="modal" data-bs-target="#paymentOptionsModal">
                            <i class="bi bi-cash-coin me-2"></i> Try Payment Again
                        </button>
                    `;
                }
            }, { once: true }); // Use { once: true } to automatically remove the listener after it fires

            // If for some reason the modal instance wasn't found (e.g., already closed manually),
            // proceed directly with the payment process after a short delay.
            // This part runs if 'paymentOptionsModal' was null.
            if (!paymentOptionsModal) {
                console.warn('Payment options modal instance not found. Proceeding with payment without modal dismissal via Bootstrap.');
                // Since the spinner is already shown, just proceed after a short pause.
                await new Promise(resolve => setTimeout(resolve, 500));
                // Directly call the core processing logic as if hidden.bs.modal fired
                // (You might want to extract the try/catch block above into its own function for reuse)
                // For now, let's duplicate for clarity if this fallback path is truly hit.
                try {
                    const response = await fetch(`/Billing/ProcessPayment?billId=${billId}&paymentMethod=${paymentMethod}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.success) {
                            paymentSection.innerHTML = `
                                <div class="alert alert-success mt-3" role="alert">
                                    <i class="bi bi-check-circle-fill me-2"></i> Payment Successful! (${paymentMethod} payment)
                                </div>
                                <button type="button" class="btn btn-info btn-lg rounded-pill shadow mt-3" data-bs-toggle="modal" data-bs-target="#billDetailsModal" onclick="loadBillDetails(${billId})">
                                    <i class="bi bi-file-earmark-text-fill me-2"></i> View Bill
                                </button>
                            `;
                            document.getElementById('billStatusText').innerText = data.billStatus;
                        } else {
                            paymentSection.innerHTML = `
                                <div class="alert alert-danger mt-3" role="alert">
                                    <i class="bi bi-x-circle-fill me-2"></i> Payment failed: ${data.message || 'Unknown error.'}
                                </div>
                                <button type="button" class="btn btn-primary btn-lg rounded-pill shadow mt-3" data-bs-toggle="modal" data-bs-target="#paymentOptionsModal">
                                    <i class="bi bi-cash-coin me-2"></i> Try Payment Again
                                </button>
                            `;
                        }
                    } else {
                        paymentSection.innerHTML = `
                            <div class="alert alert-danger mt-3" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i> Error processing payment. HTTP Status: ${response.status}. Please try again.
                            </div>
                        `;
                    }
                } catch (error) {
                    console.error('An unhandled error occurred during fallback payment processing:', error);
                    paymentSection.innerHTML = `
                        <div class="alert alert-danger mt-3" role="alert">
                            <i class="bi bi-exclamation-octagon-fill me-2"></i> An unexpected error occurred during fallback.
                        </div>
                    `;
                }
            }
        }

        // Function to load bill details into the modal (keep as is)
        async function loadBillDetails(billId) {
            const billDetailsContent = document.getElementById('billDetailsContent');
            billDetailsContent.innerHTML = 'Loading bill details...';

            try {
                const response = await fetch(`/Billing/GetBillDetails?billId=${billId}`);
                if (response.ok) {
                    const bill = await response.json();
                    let uploadedDocHtml = '';
                    if (bill.uploadedFilePath) {
                        uploadedDocHtml = `<dt class="col-sm-4">Uploaded Document:</dt><dd class="col-sm-8"><a href="${bill.uploadedFilePath}" target="_blank" class="btn btn-sm btn-outline-info"><i class="bi bi-file-earmark-arrow-down me-1"></i> View Document</a></dd>`;
                    }

                    billDetailsContent.innerHTML = `
                        <dl class="row">
                            <dt class="col-sm-4">Bill ID:</dt>
                            <dd class="col-sm-8 fw-bold">${bill.billId}</dd>

                            <dt class="col-sm-4">Patient ID:</dt>
                            <dd class="col-sm-8 fw-bold">${bill.patientId}</dd>

                            <dt class="col-sm-4">Total Amount:</dt>
                            <dd class="col-sm-8 fw-bold">₹ ${parseFloat(bill.totalAmount).toFixed(2)}</dd>

                            <dt class="col-sm-4">Bill Date & Time:</dt>
                            <dd class="col-sm-8 fw-bold">${new Date(bill.billDate).toLocaleString('en-IN', { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit', hour12: true })}</dd>

                            <dt class="col-sm-4">Status:</dt>
                            <dd class="col-sm-8 fw-bold">${bill.status}</dd>
                            ${uploadedDocHtml}
                        </dl>
                    `;
                } else {
                    billDetailsContent.innerHTML = '<div class="alert alert-danger">Failed to load bill details.</div>';
                }
            } catch (error) {
                console.error('Error fetching bill details:', error);
                billDetailsContent.innerHTML = '<div class="alert alert-danger">An error occurred while fetching bill details.</div>';
            }
        }

        function printBillDetails() {
            window.print();
        }
    </script>
}